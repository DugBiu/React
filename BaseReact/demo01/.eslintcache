[{"E:\\Code\\React\\BaseReact\\demo01\\src\\index.js":"1","E:\\Code\\React\\BaseReact\\demo01\\src\\App.js":"2","E:\\Code\\React\\BaseReact\\demo01\\src\\Person.js":"3","E:\\Code\\React\\BaseReact\\demo01\\src\\PersonItem.js":"4","E:\\Code\\React\\BaseReact\\demo01\\src\\Boss.js":"5"},{"size":224,"mtime":1607425749958,"results":"6","hashOfConfig":"7"},{"size":623,"mtime":1607348400817,"results":"8","hashOfConfig":"7"},{"size":3546,"mtime":1607603235424,"results":"9","hashOfConfig":"7"},{"size":1587,"mtime":1607602912929,"results":"10","hashOfConfig":"7"},{"size":964,"mtime":1607601853148,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"m0i6x1",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Code\\React\\BaseReact\\demo01\\src\\index.js",["23"],"E:\\Code\\React\\BaseReact\\demo01\\src\\App.js",[],"E:\\Code\\React\\BaseReact\\demo01\\src\\Person.js",["24"],"import React, { Component, Fragment } from 'react'\r\nimport PersonItem from './PersonItem'\r\nimport Boss from './Boss'\r\nimport axios from 'axios'\r\n\r\nimport './style.css'\r\n\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group'\r\n\r\nclass Person extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      inputValue: '',\r\n      list: ['基础按摩','精油推背']\r\n    }\r\n    this.addServe = this.addServe.bind(this)\r\n    this.deleteServe = this.deleteServe.bind(this)\r\n  }\r\n  // TODO 生命周期\r\n  // ? 组件挂载之前\r\n  // componentWillMount() {\r\n  // }\r\n  // ? 组件挂载结束\r\n  componentDidMount() {\r\n    console.log(axios)\r\n    // ! 一般在dom 挂载结束之后 加载异步数据\r\n    // axios.post(url, ) \r\n    // axios.post('https://baidu.com')\r\n    //   .then(res => { console.log(`获取成功${res}`) })\r\n    //   .catch((error) => { console.log(`获取失败${error}`)})\r\n  }\r\n  // ? 是否可以更新 需要返回一个 boolean \r\n  //   todo 返回 true:更新之后继续执行 false: 更新停止 \r\n  // shouldComponentUpdate() {\r\n  //   return true\r\n  // }\r\n  // ?开始更新\r\n  // componentWillUpdate() {\r\n  // }\r\n  // ? 更新结束\r\n  // componentDidUpdate() {\r\n  // }\r\n  render() {\r\n    // console.log('render ---------> 组件挂载中')\r\n    return (\r\n      <Fragment>\r\n        <div>\r\n          <label htmlFor=\"add\">增加服务：</label>\r\n          <input\r\n            id=\"add\"\r\n            className=\"input-box\"\r\n            value={this.state.inputValue}\r\n            onChange={this.inputChange.bind(this)}\r\n            ref= {(input)=>{this.input = input}}\r\n          />\r\n          <button className=\"add-btn\" onClick={this.addServe}>增加服务</button>\r\n        </div>\r\n        <ul ref={(ul) => { this.ul = ul }}>\r\n          <TransitionGroup>\r\n            {\r\n              this.state.list.map((e, index) => {\r\n                return (\r\n                  <CSSTransition\r\n                    timeout={2000}\r\n                    classNames=\"boss-text\"\r\n                    unmountOnExit\r\n                    appear={true}\r\n                    key={index}\r\n                  >\r\n                    <PersonItem\r\n                      key={index}\r\n                      content={e}\r\n                      index={index}\r\n                      list={this.state.list}\r\n                      deleteServe={this.deleteServe}\r\n                      name=\"Jack\"\r\n                    />\r\n\r\n                  </CSSTransition>\r\n                  \r\n                )\r\n              })\r\n            } \r\n          </TransitionGroup>\r\n        </ul>\r\n        <Boss />\r\n      </Fragment>\r\n    )\r\n  }\r\n  inputChange(e) {\r\n    // ! 修改数据 需要通过setState 来修改\r\n    this.setState({\r\n      inputValue: this.input.value\r\n    })\r\n  }\r\n  addServe() {\r\n    let value = this.state.inputValue\r\n    if (!this.state.inputValue) return\r\n    this.setState({\r\n      list: [...this.state.list, this.state.inputValue],\r\n      inputValue: ''\r\n    }, () => {\r\n      // TODO dom 更新是异步的因此需要通过回调来获取最新值\r\n        console.log(this.state.list.length)\r\n        // ? 通过 ref 来获取 ul 下 li 的个数\r\n      console.log(this.ul.querySelectorAll('li').length)\r\n    })    \r\n  }\r\n  deleteServe(index) {\r\n    // ! 不可以直接操作 this 里面的数据 \r\n    // TODO 建议使用声明变量来操作源数据\r\n    let list = this.state.list\r\n    list.splice(index, 1)\r\n    this.setState({\r\n      list: list\r\n    })\r\n  }\r\n}\r\nexport default Person","E:\\Code\\React\\BaseReact\\demo01\\src\\PersonItem.js",[],"E:\\Code\\React\\BaseReact\\demo01\\src\\Boss.js",[],{"ruleId":"25","severity":1,"message":"26","line":3,"column":8,"nodeType":"27","messageId":"28","endLine":3,"endColumn":11},{"ruleId":"25","severity":1,"message":"29","line":98,"column":9,"nodeType":"27","messageId":"28","endLine":98,"endColumn":14},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'value' is assigned a value but never used."]